import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from aiogram.filters import CommandStart
from aiogram import F
import asyncpg
from config import DB_CONFIG, BOT_TOKEN

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

user_phones = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
contact_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]
    ],
    resize_keyboard=True,
    one_time_keyboard=True,
    input_field_placeholder="–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ"
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è KPI
kpi_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìä –ü–æ–∫–∞–∑–∞—Ç—å KPI")],
        [KeyboardButton(text="üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")]
    ],
    resize_keyboard=True
)

@dp.message(CommandStart())
async def send_welcome(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n" +
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
        reply_markup=contact_kb
    )

@dp.message(lambda msg: msg.contact is not None)
async def handle_contact(message: types.Message):
    phone = message.contact.phone_number
    user_phones[message.from_user.id] = phone
    print(f"üìû –ü–æ–ª—É—á–µ–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone}")
    await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ–∫–∞–∑–∞—Ç—å KPI¬ª.", reply_markup=kpi_kb)

@dp.message(F.text == "üìä –ü–æ–∫–∞–∑–∞—Ç—å KPI")
async def show_kpi(message: types.Message):
    phone = user_phones.get(message.from_user.id)
    if not phone:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ /start.")
        return

    kpis = await get_kpis_by_phone(phone)
    if kpis:
        text = "–í–∞—à–∏ KPI:\n" + "\n".join([f"üìå {name}: {value}" for name, value in kpis])
        await message.answer(text)
    else:
        await message.answer("KPI –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –≤–∞—à–µ–≥–æ –Ω–æ–º–µ—Ä–∞.")

@dp.message(F.text == "üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
async def restart_bot(message: types.Message):
    user_phones.pop(message.from_user.id, None)
    await send_welcome(message)

# ‚ùó –ò–≥–Ω–æ—Ä –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
@dp.message(lambda msg: not user_phones.get(msg.from_user.id))
async def block_text_input(message: types.Message):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É.\n" +
        "–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞."
    )

async def get_kpis_by_phone(phone: str):
    conn = await asyncpg.connect(**DB_CONFIG)
    try:
        rows = await conn.fetch("SELECT kpi_name, value FROM bot.employees WHERE phone = $1", phone)
        return [(row['kpi_name'], row['value']) for row in rows]
    finally:
        await conn.close()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
