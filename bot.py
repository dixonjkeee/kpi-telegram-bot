import asyncio
import asyncpg
from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.filters import CommandStart
from aiogram import F
from datetime import datetime
from config import DB_CONFIG, BOT_TOKEN

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

user_phones = {}
user_states = {}  # user_id -> phone
user_years = {}   # user_id -> selected year

contact_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]
    ],
    resize_keyboard=True,
    one_time_keyboard=True,
    input_field_placeholder="–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ"
)

kpi_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìä –ü–æ–∫–∞–∑–∞—Ç—å KPI")],
        [KeyboardButton(text="üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")]
    ],
    resize_keyboard=True
)

# üìÖ –ú–µ—Å—è—Ü—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º
RU_MONTHS = {
    1: "–Ø–Ω–≤–∞—Ä—å", 2: "–§–µ–≤—Ä–∞–ª—å", 3: "–ú–∞—Ä—Ç", 4: "–ê–ø—Ä–µ–ª—å",
    5: "–ú–∞–π", 6: "–ò—é–Ω—å", 7: "–ò—é–ª—å", 8: "–ê–≤–≥—É—Å—Ç",
    9: "–°–µ–Ω—Ç—è–±—Ä—å", 10: "–û–∫—Ç—è–±—Ä—å", 11: "–ù–æ—è–±—Ä—å", 12: "–î–µ–∫–∞–±—Ä—å"
}


@dp.message(CommandStart())
async def send_welcome(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
        "–§–æ—Ä–º–∞—Ç: 7933XXXXXXX\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
        reply_markup=contact_kb
    )


@dp.message(lambda msg: msg.contact is not None)
async def handle_contact(message: types.Message):
    phone = message.contact.phone_number.lstrip('+')
    user_phones[message.from_user.id] = phone
    await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ–∫–∞–∑–∞—Ç—å KPI¬ª.", reply_markup=kpi_kb)


@dp.message(F.text == "üìä –ü–æ–∫–∞–∑–∞—Ç—å KPI")
async def choose_year(message: types.Message):
    user_id = message.from_user.id
    phone = user_phones.get(user_id)

    if not phone:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ /start.")
        return

    years = await get_available_years(phone)
    if not years:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ–¥–∞.")
        return

    buttons = [
        InlineKeyboardButton(text=str(year), callback_data=f"year_{year}") for year in years
    ]
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[buttons[i:i + 3] for i in range(0, len(buttons), 3)]
    )

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥:", reply_markup=keyboard)


@dp.callback_query(lambda c: c.data.startswith("year_"))
async def choose_month(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    phone = user_phones.get(user_id)
    year = int(callback.data.split("_")[1])
    user_years[user_id] = year

    months = await get_available_months(phone, year)
    if not months:
        await callback.message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤.")
        return

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –º–µ—Å—è—Ü–µ–≤ –ø–æ —É–±—ã–≤–∞–Ω–∏—é
    months.sort(reverse=True)

    buttons = [
        InlineKeyboardButton(
            text=f"{RU_MONTHS[m.month]} {m.year}",
            callback_data=f"month_{m.month}"
        )
        for m in months
    ]
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[buttons[i:i + 3] for i in range(0, len(buttons), 3)]
    )

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", reply_markup=keyboard)


@dp.callback_query(lambda c: c.data.startswith("month_"))
async def show_kpi(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    phone = user_phones.get(user_id)
    year = user_years.get(user_id)
    month = int(callback.data.split("_")[1])

    date_obj = datetime(year, month, 1).date()
    row = await get_kpis_by_phone_and_date(phone, date_obj)

    if row:
        text = (
            f"üìä *–í–∞—à–∏ KPI –∑–∞ {RU_MONTHS[month]} {year}:*\n"
            f"üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: {row['name']}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {row['user.phone']}\n"
            f"üí∞ –í—ã—Ä—É—á–∫–∞ –∑–∞ —É—Å–ª—É–≥–∏: {row['–í—ã—Ä—É—á–∫–∞ –∑–∞ —É—Å–ª—É–≥–∏, —Ä—É–±'] or 0} —Ä—É–±\n"
            f"üß¥ –í—ã—Ä—É—á–∫–∞ –∑–∞ –ø—Ä–æ–¥—É–∫—Ç—ã: {row['–í—ã—Ä—É—á–∫–∞ –∑–∞ –ø—Ä–æ–¥—É–∫—Ç—ã, —Ä—É–±'] or 0} —Ä—É–±\n"
            f"üíº –ö–æ–ª-–≤–æ –æ–∫–∞–∑–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥: {row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∫–∞–∑–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥'] or 0}\n"
            f"üë• –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {row['–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤'] or 0}\n"
            f"üí≥ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {row['–°—Ä–µ–¥–Ω–∏–π —á–µ–∫'] or 0} —Ä—É–±\n"
            f"üîÅ –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã: {row['–ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã'] or 0}\n"
            f"üÜï –ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã: {row['–ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã'] or 0}\n"
            f"üìà –í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤: {row['–í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤'] or 0}%\n"
            f"üí∏ –ó–∞—Ä–ø–ª–∞—Ç–∞: {row['–ó–∞—Ä–ø–ª–∞—Ç–∞, —Ä—É–±'] or 0} —Ä—É–±"
        )
        await callback.message.answer(text, parse_mode="Markdown")
    else:
        await callback.message.answer("KPI –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞.")


@dp.message(F.text == "üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
async def restart_bot(message: types.Message):
    user_id = message.from_user.id
    user_phones.pop(user_id, None)
    user_years.pop(user_id, None)
    await send_welcome(message)


# üîí –ë–ª–æ–∫–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç
@dp.message(lambda msg: not user_phones.get(msg.from_user.id))
async def block_text_input(message: types.Message):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É.\n"
        "–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞."
    )


# üì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ KPI
async def get_kpis_by_phone_and_date(phone: str, date: datetime.date):
    conn = await asyncpg.connect(**DB_CONFIG)
    try:
        row = await conn.fetchrow("""
            SELECT 
                "name", 
                "user.phone", 
                "–í—ã—Ä—É—á–∫–∞ –∑–∞ —É—Å–ª—É–≥–∏, —Ä—É–±", 
                "–í—ã—Ä—É—á–∫–∞ –∑–∞ –ø—Ä–æ–¥—É–∫—Ç—ã, —Ä—É–±", 
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∫–∞–∑–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥", 
                "–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤", 
                "–°—Ä–µ–¥–Ω–∏–π —á–µ–∫", 
                "–ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã", 
                "–ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã", 
                "–í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤", 
                "–ó–∞—Ä–ø–ª–∞—Ç–∞, —Ä—É–±"
            FROM bot.v_monada_staff_kpi_by_month
            WHERE "user.phone" = $1 AND "–ú–µ—Å—è—Ü" = $2
        """, phone, date)
        return row
    finally:
        await conn.close()


# üìÜ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–¥–æ–≤
async def get_available_years(phone: str):
    conn = await asyncpg.connect(**DB_CONFIG)
    try:
        rows = await conn.fetch("""
            SELECT DISTINCT EXTRACT(YEAR FROM "–ú–µ—Å—è—Ü") AS year
            FROM bot.v_monada_staff_kpi_by_month
            WHERE "user.phone" = $1
            ORDER BY year DESC
        """, phone)
        return [int(row["year"]) for row in rows]
    finally:
        await conn.close()


# üìÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–µ–≤ –ø–æ –≥–æ–¥—É
async def get_available_months(phone: str, year: int):
    conn = await asyncpg.connect(**DB_CONFIG)
    try:
        rows = await conn.fetch("""
            SELECT DISTINCT "–ú–µ—Å—è—Ü"
            FROM bot.v_monada_staff_kpi_by_month
            WHERE "user.phone" = $1 AND EXTRACT(YEAR FROM "–ú–µ—Å—è—Ü") = $2
            ORDER BY "–ú–µ—Å—è—Ü"
        """, phone, year)
        return [row["–ú–µ—Å—è—Ü"] for row in rows]
    finally:
        await conn.close()


async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
